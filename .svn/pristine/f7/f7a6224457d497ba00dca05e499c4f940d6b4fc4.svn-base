/*
 * mygame.cpp: 本檔案儲遊戲本身的class的implementation
 * Copyright (C) 2002-2008 Woei-Kae Chen <wkc@csie.ntut.edu.tw>
 *
 * This file is part of game, a free game development framework for windows.
 *
 * game is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * game is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * History:
 *   2002-03-04 V3.1
 *          Add codes to demostrate the use of CMovingBitmap::ShowBitmap(CMovingBitmap &).
 *	 2004-03-02 V4.0
 *      1. Add CGameStateInit, CGameStateRun, and CGameStateOver to
 *         demonstrate the use of states.
 *      2. Demo the use of CInteger in CGameStateRun.
 *   2005-09-13
 *      Rewrite the codes for CBall and CEraser.
 *   2005-09-20 V4.2Beta1.
 *   2005-09-29 V4.2Beta2.
 *      1. Add codes to display IDC_GAMECURSOR in GameStateRun.
 *   2006-02-08 V4.2
 *      1. Revise sample screens to display in English only.
 *      2. Add code in CGameStateInit to demo the use of PostQuitMessage().
 *      3. Rename OnInitialUpdate() -> OnInit().
 *      4. Fix the bug that OnBeginState() of GameStateInit is not called.
 *      5. Replace AUDIO_CANYON as AUDIO_NTUT.
 *      6. Add help bitmap to CGameStateRun.
 *   2006-09-09 V4.3
 *      1. Rename Move() and Show() as OnMove and OnShow() to emphasize that they are
 *         event driven.
 *   2006-12-30
 *      1. Bug fix: fix a memory leak problem by replacing PostQuitMessage(0) as
 *         PostMessage(AfxGetMainWnd()->m_hWnd, WM_CLOSE,0,0).
 *   2008-02-15 V4.4
 *      1. Add namespace game_framework.
 *      2. Replace the demonstration of animation as a new bouncing ball.
 *      3. Use ShowInitProgress(percent) to display loading progress. 
 *   2010-03-23 V4.6
 *      1. Demo MP3 support: use lake.mp3 to replace lake.wav.
*/

#include "stdafx.h"
#include "Resource.h"
#include <mmsystem.h>
#include <ddraw.h>
#include "audio.h"
#include "gamelib.h"
#include "mygame.h"
#include <fstream>
#include <math.h>

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <vector>
namespace game_framework {

/////////////////////////////////////////////////////////////////////////////
// CBall: Ball class
/////////////////////////////////////////////////////////////////////////////


CMan::CMan()
{
	Initialize();
	//x=-5;
	/*vector<CPoint> goldVec;
	CPoint point(4,6);
	goldVec.push_back(point);

	for(int i=0;i<goldVec.size();i++){
		CPoint goldLoc = goldVec[i];
		//remove
		goldLoc.x;
		map[goldLoc.x][goldLoc.y] = 0;
	}*/
}

int CMan::GetX1()
{
	return x;
}

int CMan::GetY1()
{
	return y;
}

int CMan::GetX2()
{
	return x + animation.Width();
}

int CMan::GetY2()
{
	return y + animation.Height();
}

void CMan::Initialize()
{
	const int INITIAL_VELOCITY = 18;	// 初始上升速度
	const int FLOOR = 385;				// 地板座標
	jumpSub=0;
	floor = FLOOR;
	x = 0; y = FLOOR-1;				// y座標比地板高1點(站在地板上)
	rising = true;
	initial_velocity = INITIAL_VELOCITY;
	velocity = initial_velocity;
	b=false;
	Eat=false;
	animation.SetDelayCount(3);
	animation2.SetDelayCount(3);
	animation4.SetDelayCount(3);
	count=0;
	speed=5;
	flag=0;
	isMovingLeft = isMovingRight= isMovingUp = isMovingDown = false;
	HaveStarCount=100;
	EnableControlMan=1;
	CountInvincible=0;
	UseInvincible=false;
	MoveUp=16;
	MoveDown=16;
	enableDown=false;
}

void CMan::LoadBitmap()
{
	animation.AddBitmap(IDB_a1,RGB(255,255,255)); //跑
	animation.AddBitmap(IDB_a2,RGB(255,255,255));
	animation.AddBitmap(IDB_a3,RGB(255,255,255));
	animation.AddBitmap(IDB_a4,RGB(255,255,255));
	animation.AddBitmap(IDB_a5,RGB(255,255,255));
	animation.AddBitmap(IDB_a6,RGB(255,255,255));
	animation.AddBitmap(IDB_a7,RGB(255,255,255));
	animation.AddBitmap(IDB_a8,RGB(255,255,255));
	animation.AddBitmap(IDB_a9,RGB(255,255,255));
	animation.AddBitmap(IDB_a10,RGB(255,255,255));

	animation2.AddBitmap(IDB_UP,RGB(255,255,255));	//跳
	animation3.AddBitmap(IDB_DOWN,RGB(255,255,255));//降

	animation4.AddBitmap(IDB_SUPER0,RGB(255,255,255));//無敵
	animation4.AddBitmap(IDB_SUPER1,RGB(255,255,255));//無敵
	animation4.AddBitmap(IDB_SUPER2,RGB(255,255,255));//無敵
	animation4.AddBitmap(IDB_SUPER3,RGB(255,255,255));//無敵


	height=animation.Height();
	width=animation.Width();
}

void CMan::OnMove(CGameMap* map)
{
	int rx,ry;
	int lx=x+5,ly=y+height-6;
	int topRightX=x+width;
	int down=0;
	const int goldWidth=50;
	int i=0,j=0,k=0;
	int l=0,m=0;
	const int STEP_SIZE = 5;
	const int floor = 385;
	jumpSub=0;
	b=false;
	if(UseInvincible==true&&HaveStarCount!=0){
				if (MoveUp > 0 && enableDown==false) {
					y -= MoveUp;	// 當速度 > 0時，y軸上升(移動velocity個點，velocity的單位為 點/次)
					MoveUp--;		// 受重力影響，下次的上升速度降低
					MoveDown=16;
					if(y<=240)y=240;
				} 
				else {
				enableDown=true;
				}
		CountInvincible++;
		EnableControlMan=0;
	}
	if(CountInvincible>=165){
		for(i=x;i<=x+50;i++){
			if(map->map[x][415]==2)k++;
		}
		if(k==0){
				if (y < floor-1 && enableDown==true) {  // 當y座標還沒碰到地板
					y += MoveDown;	// y軸下降(移動velocity個點，velocity的單位為 點/次)
					MoveDown++;		// 受重力影響，下次的下降速度增加
					MoveUp=16;
				} 
		
				else{
					y=floor;
					enableDown=false;
					UseInvincible=false;
					HaveStarCount--;
					CountInvincible=0;
		//y=floor;
					EnableControlMan=1;
		}
		}
	}
	TRACE("CountInvincible=%d\n",CountInvincible);
	if (isMovingUp){
		jumpSub=5;
	}
	rx=x+width-10-jumpSub;
	ry=y+height-6;
	TRACE("lx=%d ly=%d rx=%d ry=%d width=%d height=%d\n",lx,ly,rx,ry,width,height);
//	if(map->map[lx][ly]==2||map->map[rx][ry]==2)b=true;
		for(i=x;i<=topRightX;i++){
				for(j=y;j<=ry;j++){
					if(Eat==false){
						if(map->map[i][j]==6){
							for(l=i-40;l<=i+40;l++)
								for(m=j-40;m<=j+40;m++)
								if(map->map[l][m]==5){
									map->map[l][m]=0;
									HaveStarCount++;
									break;
								}
							Eat=true;
						}
						if(map->map[i][j]==4){
							for(l=i-50;l<=i+50;l++)
								for(m=j-50;m<=j+50;m++)
								if(map->map[l][m]==3){
									map->map[l][m]=0;
									break;
								}
							Eat=true;
						}
						if(Eat==true){
							CAudio::Instance()->Play(AUDIO_Ding, false);

						}
					}
				}
		}
	jumpSub=0;

if(EnableControlMan==1){
	if (isMovingUp){flag=1;}
		if(isMovingDown){rising = false;down=15;}
		if(flag==1){
			if (rising) {			// 上升狀態
				if (velocity > 0) {
					y -= velocity;	// 當速度 > 0時，y軸上升(移動velocity個點，velocity的單位為 點/次)
					velocity--;		// 受重力影響，下次的上升速度降低
				} else {
					rising = false; // 當速度 <= 0，上升終止，下次改為下降
					velocity = 5;	// 下降的初速(velocity)為1
				}
			} else{				// 下降狀態
				if (y < floor-1) {  // 當y座標還沒碰到地板
					y += (velocity+down);	// y軸下降(移動velocity個點，velocity的單位為 點/次)
					velocity++;		// 受重力影響，下次的下降速度增加
					down=0;
				} else {
					y = floor - 1;  // 當y座標低於地板，更正為地板上
					rising = true;	// 探底反彈，下次改為上升
					velocity = initial_velocity; // 重設上升初始速度
					flag=0;
				}
			}
		}
}
	animation.OnMove();
	animation2.OnMove();
	animation3.OnMove();
	animation4.OnMove();
}
void CMan::SetMovingDown(bool flag)
{
	isMovingDown = flag;
}

void CMan::SetMovingLeft(bool flag)
{
	isMovingLeft = flag;
}

void CMan::SetMovingRight(bool flag)
{
	isMovingRight = flag;
}

void CMan::SetMovingUp(bool flag)
{
	isMovingUp = flag;
}

void CMan::SetXY(int nx, int ny)
{
	x = nx; y = ny;
}

void CMan::OnShow(CGameMap* map)
{

	int	sx=map->screenx(x);
	int	sy=map->screeny(y);
	if(sx==15)x=15;

	animation.SetTopLeft(sx,sy);
	animation2.SetTopLeft(sx,sy);
	animation3.SetTopLeft(sx,sy);
	animation4.SetTopLeft(sx,sy);
	if(CountInvincible!=0)animation4.OnShow();
	else if(flag&&rising)animation2.OnShow();
	else if(flag&&(!rising))animation3.OnShow();
	else animation.OnShow();
}

	
CPractice::CPractice()  
{
		x=0;
		y=0;
}

void CPractice::OnMove()
{

}

void CPractice::LoadBitmap()
{
	pic.LoadBitmap(IDB_MAN1);
}

void CPractice::OnShow()
{
	pic.SetTopLeft(x,y);
	pic.ShowBitmap();
}


/////////////////////////////////////////////////////////////////////////////
// CBouncingBall: BouncingBall class
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// CEraser: Eraser class
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的遊戲開頭畫面物件
/////////////////////////////////////////////////////////////////////////////

CGameStateInit::CGameStateInit(CGame *g)
: CGameState(g)
{

}

void CGameStateInit::OnInit()
{
	//
	// 當圖很多時，OnInit載入所有的圖要花很多時間。為避免玩遊戲的人
	//     等的不耐煩，遊戲會出現「Loading ...」，顯示Loading的進度。
	//
	ShowInitProgress(0);	// 一開始的loading進度為0%
	//
	// 開始載入資料
	//

	logo.LoadBitmap(IDB_BACKGROUND);
	//Sleep(300);				// 放慢，以便看清楚進度，實際遊戲請刪除此Sleep
	//
	// 此OnInit動作會接到CGameStaterRun::OnInit()，所以進度還沒到100%
	//CAudio::Instance()->Play(AUDIO_Start, true);

	//
}

void CGameStateInit::OnBeginState()
{
	if(isLoadStart!=99999999){
		CAudio::Instance()->Load(AUDIO_Start,  "sounds\\start.mp3");
		isLoadStart=99999999;
	}
	CAudio::Instance()->Play(AUDIO_Start, true);
}

void CGameStateInit::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	const char KEY_ESC = 27;
	const char KEY_SPACE = ' ';
	if (nChar == KEY_SPACE){
		CAudio::Instance()->Stop(AUDIO_Start);
		GotoGameState(GAME_STATE_RUN);	// 切換至GAME_STATE_RUN
	}					
	else if (nChar == KEY_ESC)								// Demo 關閉遊戲的方法
		PostMessage(AfxGetMainWnd()->m_hWnd, WM_CLOSE,0,0);	// 關閉遊戲
}

void CGameStateInit::OnLButtonDown(UINT nFlags, CPoint point)
{
	CAudio::Instance()->Stop(AUDIO_Start);
	GotoGameState(GAME_STATE_RUN);		// 切換至GAME_STATE_RUN
}

void CGameStateInit::OnShow()
{
	logo.SetTopLeft(0,0);    //貼上開始圖片
	logo.ShowBitmap();
	//
	// Demo螢幕字型的使用，不過開發時請盡量避免直接使用字型，改用CMovingBitmap比較好
	//
	CDC *pDC = CDDraw::GetBackCDC();			// 取得 Back Plain 的 CDC 
	CFont f,*fp;
	f.CreatePointFont(160,"Times New Roman");	// 產生 font f; 160表示16 point的字
	fp=pDC->SelectObject(&f);					// 選用 font f
	pDC->SetBkColor(RGB(0,0,0));
	pDC->SetTextColor(RGB(255,255,0));
	//pDC->TextOut(120,220,"Please click mouse or press SPACE to begin.");
	//pDC->TextOut(5,395,"Press Ctrl-F to switch in between window mode and full screen mode.");
	if (ENABLE_GAME_PAUSE)
		pDC->TextOut(5,425,"Press Ctrl-Q to pause the Game.");
	//pDC->TextOut(5,455,"Press Alt-F4 or ESC to Quit.");
	pDC->SelectObject(fp);						// 放掉 font f (千萬不要漏了放掉)
	CDDraw::ReleaseBackCDC();					// 放掉 Back Plain 的 CDC
}								

/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的結束狀態(Game Over)
/////////////////////////////////////////////////////////////////////////////

CGameStateOver::CGameStateOver(CGame *g)
: CGameState(g)
{
}
void CGameStateOver::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	const char KEY_Enter =0x0D; 
	if(nChar==KEY_Enter) GotoGameState(GAME_STATE_INIT);

}
void CGameStateOver::OnMove()
{
	counter--;
	if (counter < 0)
		GotoGameState(GAME_STATE_INIT);

}

void CGameStateOver::OnBeginState()
{
	if(isLoadOver!=99999999){
		CAudio::Instance()->Load(AUDIO_Over,  "sounds\\over.mp3");	// 載入編號1的聲音lake.mp3
		isLoadOver=99999999;
	}
	CAudio::Instance()->Play(AUDIO_Over, false);			// 撥放 over.mp3
	counter = 30 * 5; // 5 seconds

}

void CGameStateOver::OnInit()
{
	//
	// 當圖很多時，OnInit載入所有的圖要花很多時間。為避免玩遊戲的人
	//     等的不耐煩，遊戲會出現「Loading ...」，顯示Loading的進度。
	//
	ShowInitProgress(66);	// 接個前一個狀態的進度，此處進度視為66%


	over.LoadBitmapA(IDB_OVER);
	//
	// 開始載入資料
	//
	//Sleep(300);				// 放慢，以便看清楚進度，實際遊戲請刪除此Sleep
	//
	// 最終進度為100%
	//
	ShowInitProgress(100);
}


void CGameStateOver::OnShow()
{
	over.SetTopLeft(0,0);
	over.ShowBitmap();
	CDC *pDC = CDDraw::GetBackCDC();			// 取得 Back Plain 的 CDC 
	CFont f,*fp;
	f.CreatePointFont(160,"Times New Roman");	// 產生 font f; 160表示16 point的字
	fp=pDC->SelectObject(&f);					// 選用 font f
	pDC->SetBkColor(RGB(0,0,0));
	pDC->SetTextColor(RGB(255,255,0));
	char str[80];		// Demo 數字對字串的轉換
	sprintf(str, "Game Over ! (%d)", counter / 30);
	pDC->TextOut(240,260,str);
	pDC->SelectObject(fp);						// 放掉 font f (千萬不要漏了放掉)
	CDDraw::ReleaseBackCDC();					// 放掉 Back Plain 的 CDC


}

/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的遊戲執行物件，主要的遊戲程式都在這裡
/////////////////////////////////////////////////////////////////////////////

CGameStateRun::CGameStateRun(CGame *g)
: CGameState(g), NUMBALLS(28)
{

}

CGameStateRun::~CGameStateRun()
{

}

void CGameStateRun::OnBeginState()
{
	const int BALL_GAP = 90;
	const int BALL_XY_OFFSET = 45;
	const int BALL_PER_ROW = 7;
	const int HITS_LEFT = 0;
	const int BACKGROUND_X = 0;
	const int ANIMATION_SPEED = 15;
	char str[100];
	int temp;
	char filename[]="Source\\score.txt";
		fstream fp;
		fp.open(filename, ios::in);
		fp.getline(str,sizeof(str));
		temp=atoi(str);
		hits_left.SetInteger(temp);
		fp.close();//關閉檔案
		HighScore=temp;
		//TRACE("n=%d\n",hits_left.GetInteger());*/
	if(isLoadGame!=99999999){
		CAudio::Instance()->Load(AUDIO_Game,  "sounds\\game.mp3");
		CAudio::Instance()->Load(AUDIO_Ding,  "sounds\\ding.mp3");
		isLoadGame=99999999;
	}
	CAudio::Instance()->Play(AUDIO_Game, true);	

	gamemap.Initialize();
	moveSpeed=0;
	man.Initialize();
	background.SetTopLeft(BACKGROUND_X,0);				// 設定背景的起始座標
	help.SetTopLeft(0, SIZE_Y - help.Height());			// 設定說明圖的起始座標
	hits_left.SetInteger(HITS_LEFT);					// 指定剩下的撞擊數
	hits_left.SetTopLeft(480,0);		// 分數位置
	BestScore.SetTopLeft(0,-5);
	YourScore.SetTopLeft(70,180);

}

void CGameStateRun::OnMove()							// 移動遊戲元素
{
	int bonus=100;
	if(man.CountInvincible!=0)hits_left.Add(5);
	if(man.b==false){
		hits_left.Add(1);
		gamemap.OnMove(&man);
		man.OnMove(&gamemap);
		if(man.Eat==true){
			hits_left.Add(bonus);
			man.Eat=false;
		}

		//TRACE("hits_left n=%d\n", hits_left.GetInteger());

	}
	//
	// 如果希望修改cursor的樣式，則將下面程式的commment取消即可
	//
	// SetCursor(AfxGetApp()->LoadCursor(IDC_GAMECURSOR));
	//
	// 移動背景圖的座標
	//

	if(man.b==true){

		int temp=hits_left.GetInteger();
		if(temp>HighScore){
			char filename[]="Source\\score.txt";
			fstream fp;
			fp.open(filename, ios::out);
			fp<<temp<<endl;//寫入字串
			fp.close();//關閉檔案
		}
		CAudio::Instance()->Stop(0);
		CAudio::Instance()->Stop(2);
		man.count++;	

		hits_left.SetTopLeft(260,200);
		hits_left.ShowBitmap();

		if(man.count>=100){
			OnInitOver();
			GotoGameState(GAME_STATE_OVER);
		}
	}

}
void CGameStateRun::OnInit()  								// 遊戲的初值及圖形設定
{
	//
	// 當圖很多時，OnInit載入所有的圖要花很多時間。為避免玩遊戲的人
	//     等的不耐煩，遊戲會出現「Loading ...」，顯示Loading的進度。
	//
	ShowInitProgress(33);	// 接個前一個狀態的進度，此處進度視為33%
	//
	// 開始載入資料
	gamemap.LoadBitmap();
	man.LoadBitmap();
	background.LoadBitmap(IDB_BACKRUN);					// 載入背景的圖形
	BestScore.LoadBitmap(IDB_BEST,RGB(255,255,255));
	YourScore.LoadBitmap(IDB_YOURSCORE,RGB(255,255,255));
	//
	// 完成部分Loading動作，提高進度
	//
	ShowInitProgress(50);
	//Sleep(300); // 放慢，以便看清楚進度，實際遊戲請刪除此Sleep
	//
	// 繼續載入其他資料
	//
	help.LoadBitmap(IDB_HELP,RGB(255,255,255));				// 載入說明的圖形
	hits_left.LoadBitmap();	


	//
	// 此OnInit動作會接到CGameStaterOver::OnInit()，所以進度還沒到100%
	//
}

void CGameStateRun::OnInitOver(){
	const int BALL_GAP = 90;
	const int BALL_XY_OFFSET = 45;
	const int BALL_PER_ROW = 7;
	const int HITS_LEFT = 0;
	const int BACKGROUND_X = 0;
	const int ANIMATION_SPEED = 15;
	char str[100];
	int temp;
	char filename[]="Source\\score.txt";
		fstream fp;
		fp.open(filename, ios::in);
		fp.getline(str,sizeof(str));
		temp=atoi(str);
		hits_left.SetInteger(temp);
		fp.close();//關閉檔案
		HighScore=temp;

	gamemap.Initialize();
	moveSpeed=0;
	man.Initialize();
	background.SetTopLeft(BACKGROUND_X,0);				// 設定背景的起始座標
	help.SetTopLeft(0, SIZE_Y - help.Height());			// 設定說明圖的起始座標
	hits_left.SetInteger(HITS_LEFT);					// 指定剩下的撞擊數
	hits_left.SetTopLeft(480,0);		// 指定剩下撞擊數的座標
	BestScore.SetTopLeft(0,-5);
	YourScore.SetTopLeft(70,180);


}

void CGameStateRun::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	const char KEY_LEFT  = 0x25; // keyboard左箭頭
	const char KEY_UP    = 0x26; // keyboard上箭頭
	const char KEY_RIGHT = 0x27; // keyboard右箭頭
	const char KEY_DOWN  = 0x28; // keyboard下箭頭
	const char KEY_Z  = 0x5A; // keyboard  Z
	int i=0;
	if (nChar == KEY_LEFT)
		man.SetMovingLeft(true);
	if (nChar == KEY_RIGHT)
		man.SetMovingRight(true);
	if (nChar == KEY_UP)
		man.SetMovingUp(true);
	if (nChar == KEY_DOWN)
		man.SetMovingDown(true);
	if(nChar==KEY_Z)
		man.UseInvincible=true;
}

void CGameStateRun::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	const char KEY_LEFT  = 0x25; // keyboard左箭頭
	const char KEY_UP    = 0x26; // keyboard上箭頭
	const char KEY_RIGHT = 0x27; // keyboard右箭頭
	const char KEY_DOWN  = 0x28; // keyboard下箭頭
	if (nChar == KEY_LEFT)
		man.SetMovingLeft(false);
	if (nChar == KEY_RIGHT)
		man.SetMovingRight(false);
	if (nChar == KEY_UP)
		man.SetMovingUp(false);
	if (nChar == KEY_DOWN)
		man.SetMovingDown(false);
}

void CGameStateRun::OnLButtonDown(UINT nFlags, CPoint point)  // 處理滑鼠的動作
{
	
}

void CGameStateRun::OnLButtonUp(UINT nFlags, CPoint point)	// 處理滑鼠的動作
{
	
}

void CGameStateRun::OnMouseMove(UINT nFlags, CPoint point)	// 處理滑鼠的動作
{
	// 沒事。如果需要處理滑鼠移動的話，寫code在這裡
}

void CGameStateRun::OnRButtonDown(UINT nFlags, CPoint point)  // 處理滑鼠的動作
{
	
}

void CGameStateRun::OnRButtonUp(UINT nFlags, CPoint point)	// 處理滑鼠的動作
{
	
}

void CGameStateRun::OnShow()
{
	
	//
	//  注意：Show裡面千萬不要移動任何物件的座標，移動座標的工作應由Move做才對，
	//        否則當視窗重新繪圖時(OnDraw)，物件就會移動，看起來會很怪。換個術語
	//        說，Move負責MVC中的Model，Show負責View，而View不應更動Model。
	//
	//
	//  貼上背景圖、撞擊數、球、擦子、彈跳的球
	//
	//background.ShowBitmap();			// 貼上背景圖
	int temp=hits_left.GetInteger();
	gamemap.OnShow();
	BestScore.ShowBitmap();
	hits_left.ShowBitmap();
	hits_left.SetTopLeft(70,0);
	hits_left.SetInteger(HighScore);
	hits_left.ShowBitmap();
	hits_left.SetInteger(temp);
	hits_left.SetTopLeft(480,0);
	if(man.b==true)	{	
		YourScore.ShowBitmap();
	}
	man.OnShow(&gamemap);
}
void CGameMap::Initialize()
{
	X=15;
	speed=5;
	count=0;
	int k=240;

	int r=0,gset=0;
	int r1=0;
	for(int i=0;i<415;i++)
		for(int j=0;j<8000;j++){
			map[j][i]=0;
		}
	for(int i=0;i<8000;i++)
		for(int j=415;j<600;j++){	
		map[i][j]=1;
		}

	for(int i=900;i<4000;i++)
		for(int j=415;j<600;j++){
		map[i][j]=2;
		}
	for(int i=1300;i<1400;i++)
		for(int j=415;j<600;j++){	
		map[i][j]=2;
		}
	for(int i=1550;i<1650;i++)
		for(int j=415;j<600;j++){	
		map[i][j]=2;
		}
	for(int i=2000;i<2050;i++)
		for(int j=415;j<600;j++){	
		map[i][j]=2;
		}
	for(int i=2400;i<2475;i++)
		for(int j=415;j<600;j++){	
		map[i][j]=2;
		}

	for(int i=3200;i<3300;i++)
		for(int j=415;j<600;j++){	
		map[i][j]=2;
		}
	for(int i=3800;i<3820;i++)
		for(int j=415;j<600;j++){	
		map[i][j]=2;
		}
	for(int i=5000;i<5100;i++)
		for(int j=415;j<600;j++){	
		map[i][j]=2;
		}
	for(int i=5800;i<6000;i++)
		for(int j=415;j<600;j++){	
		map[i][j]=2;
		}
	for(int i=6500;i<6700;i++)
		for(int j=415;j<600;j++){	
		map[i][j]=2;
		}	
	for(int i=7000;i<7100;i++)
		for(int j=415;j<600;j++){	
		map[i][j]=2;
		}

if(CreatStarTime%4==0)
	while(1){
			r=((rand()%7001)+1);//1~7000
			if(r%100!=0)continue;
			if(r<800)continue;
		map[r][k]=5;
		for(int i=r+1;i<=r+40;i++)
			for(int j=k+1;j<=k+40;j++)
				map[i][j]=6;
	}
			while(1){
				r1=((rand()%7001)+1);//1~7000
					if(r1%100!=0)continue;
					if(r1<800)continue;
					if(r1==r)continue;
						map[r1][k]=3;
						TRACE("R%d, K%d\n", r, k);
							for(int i=r1+1;i<=r1+50;i++)
								for(int j=k+1;j<=k+40;j++)
								map[i][j]=4;
				gset++;
				if(gset>10)break;//100個
			//TRACE("rand=%d\n",r );

			}

}
void CGameMap::MapInitialize(){
	int k=240;
	int r=0,gset=0;
	int i,j;
	for(i=0;i<8000;i++){
		for(j=0;j<600;j++){
			if(map[i][j]==3||map[i][j]==4||map[i][j]==5||map[i][j]==6){
			map[i][j]=0;
			}
		}
	}
	TRACE("CreatStarTime=%d\n",CreatStarTime );
	if(CreatStarTime%2==0)
	while(1){
			r=((rand()%7001)+1);//1~7000
			if(r%100!=0)continue;
			if(r<800)continue;
		map[r][k]=5;
		for(int i=r+1;i<=r+40;i++)
			for(int j=k+1;j<=k+40;j++)
				map[i][j]=6;
		break;
	}
	while(1){
		r=((rand()%7001)+1);//1~7000
			if(r%100!=0)continue;
			if(r<800)continue;
		map[r][k]=3;
		for(int i=r+1;i<=r+50;i++)
			for(int j=k+1;j<=k+40;j++)
				map[i][j]=4;
		gset++;
		if(gset>10)break;//10個
	}
}


void CGameMap::OnKeyDown(UINT nChar)
{
	const int KEY_SPACE= 0x20;

}

void CGameMap::OnMove(CMan* man)
{
	count++;
	if(count>100){count=0;speed++;}
	if(speed>=12)speed=12;
	if(man->CountInvincible!=0)speed=50;
	man->x=man->x+speed;
	X+=speed;
	TRACE("speed=%d\n",speed );

	background.SetTopLeft(-X,0);

	if(X>7685){X=15;man->x=15;CreatStarTime++;MapInitialize();}


}

CGameMap::~CGameMap()
{
}


// 415  244

CGameMap::CGameMap()
:X(0),Y(0),MW(1),MH(1)
{
	CreatStarTime=1;


}

void CGameMap::LoadBitmap()
{
	blue.LoadBitmap(IDB_BLUE);
	green.LoadBitmap(IDB_GREEN);
	red.LoadBitmap(IDB_FIRE);
	background.LoadBitmap(IDB_BACKRUN);
	gold.LoadBitmap(IDB_GOLD,RGB(255,255,255));
	star.LoadBitmap(IDB_STAR,RGB(255,255,255));
}
int CGameMap::screenx(int x){
	if(X==15)return 15;
	else return x-X;
}
int CGameMap::screeny(int y){
	 return y-Y;
}

void CGameMap::OnShow()
{
	background.ShowBitmap();
	for(int i=0;i<8000;i+=10)
		for(int j=0;j<600;j+=10)
		{
			switch(map[i][j]){
			case 2:
				red.SetTopLeft(i-X,j);
				red.ShowBitmap();
				break;
			case 3:
				gold.SetTopLeft(i-X,j);
				gold.ShowBitmap();
				break;
			case 5:
				star.SetTopLeft(i-X,j);
				star.ShowBitmap();
				break;

		}
	}

}


}